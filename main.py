from fastapi import FastAPI, HTTPException, Query
from pydantic import BaseModel
from typing import List, Dict, Any, Optional
import uvicorn
import time
from telegram_client import telegram_service

app = FastAPI(
    title="Telegram API Gateway",
    description="API –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Telegram —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç",
    version="1.0.0"
)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
class SendMessageRequest(BaseModel):
    chat_id: int
    message: str

class JoinChatRequest(BaseModel):
    invite_link: str

# –ú–æ–¥–µ–ª–∏ –æ—Ç–≤–µ—Ç–æ–≤
class DialogResponse(BaseModel):
    id: int
    name: str
    type: str
    unread_count: int
    last_message_date: Optional[str] = None

class MessageResponse(BaseModel):
    id: int
    text: str
    date: str
    sender: str

class StatusResponse(BaseModel):
    status: str
    message: Optional[str] = None

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async def check_telegram_auth():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é Telegram –∫–ª–∏–µ–Ω—Ç–∞"""
    if not telegram_service.client or not telegram_service.client.is_connected():
        raise HTTPException(status_code=503, detail="Telegram –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
    
    if not await telegram_service.client.is_user_authorized():
        raise HTTPException(status_code=401, detail="Telegram —Å–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")

@app.on_event("startup")
async def startup_event():
    """–°–æ–±—ã—Ç–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        await telegram_service.start_client()
        print("‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω")
    except ValueError as e:
        print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {e}")
        print("‚ÑπÔ∏è API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ, –Ω–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã Telegram –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {e}")
        raise e

@app.on_event("shutdown")
async def shutdown_event():
    """–°–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        await telegram_service.disconnect_client()
        print("‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ Telegram –∫–ª–∏–µ–Ω—Ç–∞: {e}")

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ API"""
    return {
        "message": "Telegram API Gateway",
        "version": "1.1.0",
        "features": [
            "‚úÖ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤ (TTL 10 –º–∏–Ω)",
            "‚ö° –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –∏–∑ –∫–µ—à–∞",
            "üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
            "üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–µ—à–µ–º"
        ],
        "endpoints": {
            "health": "GET /health - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ –∏ –∫–µ—à–∞",
            "dialogs": "GET /dialogs?limit=50&force_refresh=false - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤",
            "dialogs_refresh": "POST /dialogs/refresh - –æ–±–Ω–æ–≤–∏—Ç—å –∫–µ—à –¥–∏–∞–ª–æ–≥–æ–≤",
            "cache_info": "GET /dialogs/cache/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–µ—à–µ",
            "cache_clear": "DELETE /dialogs/cache - –æ—á–∏—Å—Ç–∏—Ç—å –∫–µ—à",
            "messages": "GET /messages?chat_id=ID&limit=20 - –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è",
            "send_message": "POST /sendMessage - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "join_chat": "POST /joinChat - –≤—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç",
            "init_session": "POST /init-session - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é (—Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ)"
        },
        "docs": "/docs - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API"
    }

@app.get("/dialogs", response_model=List[DialogResponse])
async def get_dialogs(
    limit: int = Query(50, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è", ge=1, le=200),
    force_refresh: bool = Query(False, description="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–µ—à")
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏ –∫–∞–Ω–∞–ª–æ–≤ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - limit: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∞–ª–æ–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50, –º–∞–∫—Å–∏–º—É–º 200)
    - force_refresh: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–µ—à (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false)
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ:
    - ID —á–∞—Ç–∞
    - –ù–∞–∑–≤–∞–Ω–∏–∏  
    - –¢–∏–ø–µ (user/group/channel/supergroup)
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    - –î–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    start_time = time.time()
    await check_telegram_auth()
    
    try:
        dialogs = await telegram_service.get_dialogs(limit=limit, force_refresh=force_refresh)
        duration = time.time() - start_time
        print(f"üìä API /dialogs: {len(dialogs)} –¥–∏–∞–ª–æ–≥–æ–≤ –∑–∞ {duration:.2f}—Å (limit={limit}, refresh={force_refresh})")
        return dialogs
    except Exception as e:
        duration = time.time() - start_time
        print(f"‚ùå API /dialogs –æ—à–∏–±–∫–∞ –∑–∞ {duration:.2f}—Å: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤: {str(e)}")

@app.get("/messages", response_model=List[MessageResponse])
async def get_messages(
    chat_id: int = Query(..., description="ID —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"),
    limit: int = Query(20, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è", ge=1, le=100)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - chat_id: ID —á–∞—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
    - limit: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20, –º–∞–∫—Å–∏–º—É–º 100)
    """
    start_time = time.time()
    await check_telegram_auth()
    
    try:
        messages = await telegram_service.get_messages(chat_id, limit)
        duration = time.time() - start_time
        print(f"üì® API /messages: {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ {chat_id} –∑–∞ {duration:.2f}—Å")
        return messages
    except ValueError as e:
        duration = time.time() - start_time
        print(f"‚ùå API /messages –æ—à–∏–±–∫–∞ 404 –∑–∞ {duration:.2f}—Å: {str(e)}")
        raise HTTPException(status_code=404, detail=str(e))
    except Exception as e:
        duration = time.time() - start_time
        print(f"‚ùå API /messages –æ—à–∏–±–∫–∞ –∑–∞ {duration:.2f}—Å: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")

@app.post("/sendMessage", response_model=StatusResponse)
async def send_message(request: SendMessageRequest):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:
    - chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    - message: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    await check_telegram_auth()
    try:
        result = await telegram_service.send_message(request.chat_id, request.message)
        return StatusResponse(**result)
    except ValueError as e:
        raise HTTPException(status_code=404, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

@app.post("/joinChat", response_model=StatusResponse)
async def join_chat(request: JoinChatRequest):
    """
    –í—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç –∏–ª–∏ –∫–∞–Ω–∞–ª –ø–æ —Å—Å—ã–ª–∫–µ
    
    –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:
    - invite_link: —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏–ª–∏ username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://t.me/channel_name)
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫:
    - https://t.me/joinchat/HASH
    - https://t.me/channel_name
    - @channel_name
    """
    await check_telegram_auth()
    try:
        result = await telegram_service.join_chat(request.invite_link)
        return StatusResponse(**result)
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —á–∞—Ç—É: {str(e)}")

@app.post("/init-session")
async def init_session():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ Telegram (—Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
    
    –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø–æ–º–æ–∂–µ—Ç –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –ø–æ—Ç–µ—Ä—è–Ω–∞ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞.
    –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å—Ä–µ–¥–µ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º.
    """
    try:
        # –û—Ç–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–ª–∏–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if telegram_service.client:
            await telegram_service.disconnect_client()
            telegram_service.client = None
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        telegram_service.client = TelegramClient(
            telegram_service.session_name, 
            telegram_service.api_id, 
            telegram_service.api_hash
        )
        
        await telegram_service.client.start()
        return {"status": "success", "message": "–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"}
        
    except EOFError:
        raise HTTPException(
            status_code=400, 
            detail="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –≤ –æ–±–ª–∞—á–Ω–æ–π —Å—Ä–µ–¥–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω—É—é —Å—Ä–µ–¥—É."
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏: {str(e)}")

@app.post("/dialogs/refresh")
async def refresh_dialogs_cache():
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–µ—à –¥–∏–∞–ª–æ–≥–æ–≤
    
    –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ—á–µ–Ω–∏—è TTL
    """
    start_time = time.time()
    await check_telegram_auth()
    
    try:
        # –û—á–∏—â–∞–µ–º –∫–µ—à –∏ –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        telegram_service.clear_dialogs_cache()
        dialogs = await telegram_service.get_dialogs(limit=200, force_refresh=True)
        duration = time.time() - start_time
        
        cache_info = telegram_service.get_cache_info()
        print(f"üîÑ –ö–µ—à –æ–±–Ω–æ–≤–ª–µ–Ω: {len(dialogs)} –¥–∏–∞–ª–æ–≥–æ–≤ –∑–∞ {duration:.2f}—Å")
        
        return {
            "status": "refreshed",
            "message": f"–ö–µ—à –æ–±–Ω–æ–≤–ª–µ–Ω, –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(dialogs)} –¥–∏–∞–ª–æ–≥–æ–≤",
            "duration_seconds": round(duration, 2),
            "cache_info": cache_info
        }
    except Exception as e:
        duration = time.time() - start_time
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞ –∑–∞ {duration:.2f}—Å: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞: {str(e)}")

@app.get("/dialogs/cache/info")
async def get_cache_info():
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–µ—à–∞ –¥–∏–∞–ª–æ–≥–æ–≤
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - –°—Ç–∞—Ç—É—Å –∫–µ—à–∞ (empty/active/expired)
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∞–ª–æ–≥–æ–≤ –≤ –∫–µ—à–µ
    - –í–æ–∑—Ä–∞—Å—Ç –∫–µ—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    - TTL –∫–µ—à–∞
    """
    cache_info = telegram_service.get_cache_info()
    return {
        "cache": cache_info,
        "timestamp": time.time()
    }

@app.delete("/dialogs/cache")
async def clear_cache():
    """–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –¥–∏–∞–ª–æ–≥–æ–≤"""
    telegram_service.clear_dialogs_cache()
    return {
        "status": "cleared",
        "message": "–ö–µ—à –¥–∏–∞–ª–æ–≥–æ–≤ –æ—á–∏—â–µ–Ω"
    }

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    start_time = time.time()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
        if telegram_service.client and telegram_service.client.is_connected():
            is_authorized = await telegram_service.client.is_user_authorized()
            cache_info = telegram_service.get_cache_info()
            duration = time.time() - start_time
            
            return {
                "status": "healthy", 
                "telegram": "connected",
                "authorized": is_authorized,
                "cache": cache_info,
                "response_time_seconds": round(duration, 3)
            }
        else:
            return {
                "status": "unhealthy", 
                "telegram": "disconnected",
                "authorized": False
            }
    except Exception as e:
        return {"status": "error", "detail": str(e)}

if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    ) 