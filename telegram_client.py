import os
import asyncio
import time
from typing import List, Dict, Any, Optional
from telethon import TelegramClient, types, errors
from telethon.tl.types import User, Chat, Channel
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class TelegramService:
    def __init__(self):
        self.api_id = os.getenv('API_ID')
        self.api_hash = os.getenv('API_HASH')
        self.session_name = os.getenv('SESSION_NAME', 'telegram_session')
        self.client = None
        
        # –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤
        self._dialogs_cache = None
        self._dialogs_cache_time = 0
        self._cache_ttl = 600  # 10 –º–∏–Ω—É—Ç
        
        if not self.api_id or not self.api_hash:
            raise ValueError("API_ID –∏ API_HASH –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ base64 –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å (–¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è)
        self._restore_session_from_env()
    
    def _restore_session_from_env(self):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è SESSION_FILE_BASE64"""
        session_base64 = os.getenv('SESSION_FILE_BASE64')
        session_file_path = f"{self.session_name}.session"
        
        if session_base64 and not os.path.exists(session_file_path):
            try:
                import base64
                import gzip
                
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
                compressed_data = base64.b64decode(session_base64)
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å (–µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–∂–∞—Ç—ã)
                try:
                    session_data = gzip.decompress(compressed_data)
                    print("‚úÖ –°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —Å–∂–∞—Ç–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                except gzip.BadGzipFile:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å, –∑–Ω–∞—á–∏—Ç –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–∂–∞—Ç—ã
                    session_data = compressed_data
                    print("‚úÖ –°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
                with open(session_file_path, 'wb') as f:
                    f.write(session_data)
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        elif os.path.exists(session_file_path):
            print("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏")
        else:
            print("‚ÑπÔ∏è –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    
    async def start_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Telegram"""
        if self.client is None:
            self.client = TelegramClient(self.session_name, self.api_id, self.api_hash)
        
        if not self.client.is_connected():
            try:
                # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
                await self.client.connect()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –ª–∏ –º—ã
                if not await self.client.is_user_authorized():
                    raise ValueError(
                        "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. "
                        "–î–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ "
                        "–∏ –ø—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, –∑–∞—Ç–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–∞ Railway."
                    )
                
            except Exception as e:
                if "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" in str(e):
                    raise e
                else:
                    # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                    # (—ç—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ)
                    try:
                        await self.client.start()
                    except EOFError:
                        raise ValueError(
                            "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ –æ–±–ª–∞—á–Ω–æ–π —Å—Ä–µ–¥–µ. "
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ª–æ–∫–∞–ª—å–Ω–æ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏."
                        )
        
        return self.client
    
    async def disconnect_client(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        if self.client and self.client.is_connected():
            await self.client.disconnect()
    
    async def get_dialogs(self, limit: int = 50, force_refresh: bool = False) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ (—á–∞—Ç–æ–≤, –∫–∞–Ω–∞–ª–æ–≤, –≥—Ä—É–ø–ø) —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        
        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∞–ª–æ–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50, –º–∞–∫—Å–∏–º—É–º 200)
            force_refresh: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–µ—à
        """
        start_time = time.time()
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç
        limit = min(max(limit, 1), 200)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        current_time = time.time()
        if (not force_refresh and 
            self._dialogs_cache is not None and 
            current_time - self._dialogs_cache_time < self._cache_ttl):
            
            cached_result = self._dialogs_cache[:limit]
            print(f"üìã –î–∏–∞–ª–æ–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫–µ—à–∞ –∑–∞ {time.time() - start_time:.2f}—Å (–ª–∏–º–∏—Ç: {limit})")
            return cached_result
        
        await self.start_client()
        
        print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –¥–∏–∞–ª–æ–≥–æ–≤...")
        dialogs = []
        count = 0
        
        async for dialog in self.client.iter_dialogs():
            entity = dialog.entity
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
            if hasattr(dialog, 'archived') and dialog.archived:
                continue
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
            if isinstance(entity, User):
                chat_type = "user"
            elif isinstance(entity, Chat):
                chat_type = "group"
            elif isinstance(entity, Channel):
                if entity.broadcast:
                    chat_type = "channel"
                else:
                    chat_type = "supergroup"
            else:
                chat_type = "unknown"
            
            dialogs.append({
                "id": entity.id,
                "name": dialog.title or f"User {entity.id}",
                "type": chat_type,
                "unread_count": dialog.unread_count,
                "last_message_date": dialog.date.isoformat() if dialog.date else None
            })
            
            count += 1
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è –∫–µ—à–∞ (–º–∞–∫—Å–∏–º—É–º 200)
            if count >= 200:
                break
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
        self._dialogs_cache = dialogs
        self._dialogs_cache_time = current_time
        
        result = dialogs[:limit]
        duration = time.time() - start_time
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(dialogs)} –¥–∏–∞–ª–æ–≥–æ–≤ –≤ –∫–µ—à –∑–∞ {duration:.2f}—Å (–≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ: {len(result)})")
        
        return result
    
    def clear_dialogs_cache(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –¥–∏–∞–ª–æ–≥–æ–≤"""
        self._dialogs_cache = None
        self._dialogs_cache_time = 0
        print("üóëÔ∏è –ö–µ—à –¥–∏–∞–ª–æ–≥–æ–≤ –æ—á–∏—â–µ–Ω")
    
    def get_cache_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–µ—à–∞"""
        if self._dialogs_cache is None:
            return {"status": "empty", "dialogs_count": 0, "age_seconds": 0}
        
        age = time.time() - self._dialogs_cache_time
        return {
            "status": "active" if age < self._cache_ttl else "expired",
            "dialogs_count": len(self._dialogs_cache),
            "age_seconds": int(age),
            "ttl_seconds": self._cache_ttl
        }
    
    async def get_messages(self, chat_id: int, limit: int = 20) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞"""
        await self.start_client()
        
        try:
            entity = await self.client.get_entity(chat_id)
        except ValueError:
            raise ValueError(f"–ß–∞—Ç —Å ID {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        messages = []
        async for message in self.client.iter_messages(entity, limit=limit):
            if message.text:
                messages.append({
                    "id": message.id,
                    "text": message.text,
                    "date": message.date.isoformat(),
                    "sender": await self._get_sender_name(message)
                })
        
        return messages
    
    async def send_message(self, chat_id: int, message: str) -> Dict[str, str]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç"""
        await self.start_client()
        
        try:
            entity = await self.client.get_entity(chat_id)
            await self.client.send_message(entity, message)
            return {"status": "ok", "message": "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"}
        except ValueError:
            raise ValueError(f"–ß–∞—Ç —Å ID {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
    
    async def join_chat(self, invite_link: str) -> Dict[str, str]:
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É –∏–ª–∏ –∫–∞–Ω–∞–ª—É –ø–æ —Å—Å—ã–ª–∫–µ"""
        await self.start_client()
        
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –ø–æ —Å—Å—ã–ª–∫–µ
            result = await self.client(types.functions.messages.ImportChatInviteRequest(
                hash=invite_link.split('/')[-1]
            ))
            return {"status": "joined", "message": "–£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —á–∞—Ç—É"}
        except errors.InviteHashExpiredError:
            raise ValueError("–°—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–∞")
        except errors.InviteHashInvalidError:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è")
        except errors.UserAlreadyParticipantError:
            return {"status": "already_joined", "message": "–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ"}
        except Exception as e:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –ø–æ username
            try:
                if 't.me/' in invite_link:
                    username = invite_link.split('/')[-1]
                    if username.startswith('@'):
                        username = username[1:]
                    
                    entity = await self.client.get_entity(username)
                    await self.client(types.functions.channels.JoinChannelRequest(entity))
                    return {"status": "joined", "message": "–£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–∞–Ω–∞–ª—É"}
                else:
                    raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ —á–∞—Ç—É: {str(e)}")
            except Exception as inner_e:
                raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ —á–∞—Ç—É: {str(inner_e)}")
    
    async def _get_sender_name(self, message) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if message.sender:
            if hasattr(message.sender, 'first_name'):
                name = message.sender.first_name
                if hasattr(message.sender, 'last_name') and message.sender.last_name:
                    name += f" {message.sender.last_name}"
                return name
            elif hasattr(message.sender, 'title'):
                return message.sender.title
            else:
                return f"User {message.sender_id}"
        return "Unknown"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
telegram_service = TelegramService() 